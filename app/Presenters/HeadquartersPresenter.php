<?php

namespace SousedskaPomoc\Presenters;

use SousedskaPomoc\Repository\OrderRepository;
use Ublaboo\DataGrid\DataGrid;

class HeadquartersPresenter extends BasePresenter
{
    /** @var \SousedskaPomoc\Repository\OrderRepository */
    protected $orderRepository;

    public function injectOrderRepository(OrderRepository $orderRepository) {
        $this->orderRepository = $orderRepository;
    }

    public function beforeRender()
    {
        if (!$this->user->isInRole('admin')) {
            $this->flashMessage($this->translator->translate('messages.permission.permissionDenied'));
            $this->redirect("System:profile");
        }
        parent::beforeRender(); // TODO: Change the autogenerated stub
    }

    public function createComponentUsersDataGrid()
    {
        $role = $this->presenter->getParameter('role');

        //@TODO - add text filter into address
        $grid = new DataGrid();
        $grid->setDataSource($this->userManager->fetchAllUsersInRole($role));
        $grid->addColumnNumber('id', $this->translator->translate('templates.gridCreateUser.userID') );
        $grid->addColumnText('personName', $this->translator->translate('templates.gridCreateUser.fullName') )->setFilterText();
        $grid->addColumnText('personEmail', $this->translator->translate('templates.gridCreateUser.eMail') )->setFilterText();
        $grid->addColumnText('personPhone', $this->translator->translate('templates.gridCreateUser.phone'))->setFilterText();
        $grid->addColumnText('address', $this->translator->translate('templates.gridCreateUser.address') )
            ->setRenderer(function ($item) {
                if ($item->getAddress() != null) {
                    return $item->getAddress()->getCity();
                } else {
                    return $this->translator->translate('templates.gridCreateUser.notSpecified');
                }
            });
        $grid->addColumnNumber('active', $this->translator->translate('templates.gridCreateUser.Online'))->setFilterText();
        $grid->setDefaultPerPage(100);

        return $grid;
    }

    public function createComponentDemandsDataGrid()
    {
        $grid = new DataGrid();

        //@TODO - add text filter into address
        $grid->setDataSource($this->orderManager->fetchAllWebDemands());
        $grid->addColumnNumber('id', $this->translator->translate('templates.gridCreateDemand.id') )->setFilterText();
        $grid->addColumnText('id_volunteers', $this->translator->translate('templates.gridCreateDemand.submitter') );
        $grid->addColumnText('delivery_address', $this->translator->translate('templates.gridCreateDemand.address') )
            ->setRenderer(function ($item) {
                if ($item->getDeliveryAddress() != null) {
                    return $item->getDeliveryAddress()->getCity();
                } else {
                    return $this->translator->translate('templates.gridCreateDemand.notSpecified') ;
                }
            });
        $grid->addColumnText('delivery_phone', $this->translator->translate('templates.gridCreateDemand.phone') )->setFilterText();
        $grid->addColumnText('order_items', $this->translator->translate('templates.gridCreateDemand.orderedItems') )->setFilterText();
        $grid->addFilterSelect('status', $this->translator->translate('templates.gridCreateDemand.orderStatus') , []);
        $grid->addColumnDateTime('createdAt',  $this->translator->translate('templates.gridCreateDemand.addedTime') );
        $grid->addAction('approve', $this->translator->translate('templates.gridCreateDemand.actionConfirm'),
                                     'approve!')->setClass("btn btn-success btn-sm");
        $grid->addAction('detail', $this->translator->translate('templates.gridCreateDemand.address'),
                                     'Courier:detail')->setClass("btn btn-primary btn-sm");
        $grid->addAction('delete', $this->translator->translate('templates.gridCreateDemand.actionDelete'),
                                     'deleteDemand!')->setClass("btn btn-danger btn-sm");

        return $grid;
    }

    public function createComponentOrdersDataGrid()
    {
        $grid = new DataGrid();

        //@TODO - add text filter into address
        $grid->setDataSource($this->orderRepository->getAll());
        $grid->addColumnNumber('id',  $this->translator->translate('templates.gridCreateOdrers.id' ) )->setFilterText();
        $grid->addColumnText('owner', $this->translator->translate('templates.gridCreateOdrers.owner' ) )
            ->setRenderer(function ($item) {
                if ($item->getOwner()->getPersonName() != null) {
                    return $item->getOwner()->getPersonName();
                } else {
                    return $this->translator->translate('templates.gridCreateOdrers.notSpecified' );
                }
            });
        $grid->addColumnText('delivery_address', $this->translator->translate('templates.gridCreateOdrers.address' ))
            ->setRenderer(function ($item) {
                if ($item->getDeliveryAddress() != null) {
                    return $item->getDeliveryAddress()->getCity();
                } else {
                    return $this->translator->translate('templates.gridCreateOdrers.notSpecified' );
                }
            });
        $grid->addColumnText('delivery_phone', $this->translator->translate('templates.gridCreateOdrers.phone' ) )->setFilterText();
        $grid->addColumnText('items', $this->translator->translate('templates.gridCreateOdrers.itemsList' ))->setFilterText();

        $grid->addColumnDateTime('createdAt', $this->translator->translate('templates.gridCreateOdrers.addedTime' ));
        $grid->addColumnText('status', $this->translator->translate('templates.gridCreateOdrers.status' ) )->setFilterText();
        $grid->addAction('reset', $this->translator->translate('templates.gridCreateOdrers.reset' ),
                                     'reset!')->setClass("btn btn-danger btn-sm");
        $grid->addAction('detail', $this->translator->translate('templates.gridCreateOdrers.detail' ),
                                     'Courier:detail')->setClass("btn btn-primary btn-sm");
        $grid->addAction('delete', $this->translator->translate('templates.gridCreateOdrers.delete' ),
                                     'deleteOrder!')->setClass("btn btn-danger btn-sm");

        return $grid;
    }

    public function renderListUsers($id, $role)
    {
        $this->template->role = $role;
    }

    public function renderTowns()
    {
        $this->template->towns = $this->userManager->getTowns();
    }

    public function handleReset($id)
    {
        $this->orderManager->assignOrder(null, $id, null, 'new');
        $this->flashMessage($this->translator->translate('messages.handleReset.reseted' ));
        $this->redirect('Headquarters:orders');
    }

    public function handleDeleteDemand($id)
    {
        $this->orderManager->remove($id);
        $this->flashMessage($this->translator->translate('messages.handleDeleteDemand.deleted' ));
        $this->redirect('Headquarters:demands');
    }

    public function handleDeleteOrder($id)
    {
        $this->orderManager->remove($id);
        $this->flashMessage($this->translator->translate('messages.handleDeleteOrder.deleted' ));
        $this->redirect('Headquarters:orders');
    }

    public function handleApprove($id)
    {
        $this->orderManager->changeStatus($id, 'new');
        $this->flashMessage($this->translator->translate('messages.handleApprove.approved' ));
        $this->redirect('Headquarters:demands');
    }
}
